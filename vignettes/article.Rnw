\documentclass[a4paper]{article}
\usepackage{minimal}

%\VignetteIndexEntry{Let's build an R-package together!}
%\VignetteDepends{dplyr, devtools}
%\VignettePackage{Rpackage}

\usepackage[dvipsnames]{xcolor}
\usepackage[nochapters,eulermath=true]{classicthesis}
\usepackage{natbib}

%% recommended packages
\usepackage{orcidlink,thumbpdf}
\usepackage{framed}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage{pmboxdraw}
\usepackage{float}

\bibliographystyle{minimal}

\setlength{\marginparwidth}{4cm}
\setlength{\marginparsep}{0.4cm}
\setlength{\marginparpush}{0.75cm}
\hypersetup{citecolor=teal}

\SweaveOpts{engine=R, eps=FALSE, keep.source = TRUE}
<<preliminaries, echo=FALSE, results=hide>>=
options(prompt = " ",  continue = "   ", width = 70, useFancyQuotes = FALSE)
library("Rpackage")
library("dplyr")
library("devtools")
@

\author{Daniel Heimgartner}

\title{Let's build an \R-package together!}

\begin{document}
\maketitle

\section{Why?}

\leftmarginpar{What is an \R-package?}
\begin{itemize}
\item You are free to organize your code however you want!
\item But: There are good and bad practices (e.g., stuff like \code{stwd("/foo/bar")}, \code{install.packages("foo")}, ...)
\item A package is nothing else then a standardized way to organize \emph{information} (not necessarily code!)
\item It is nothing to be afraid of!
\end{itemize}

\leftmarginpar{What are the benefits?}
\begin{itemize}
\item Code can be easily shared and is installable (and therefore loadable via \code{library(Rpackage)})
\item Code runs everywhere
\item Code, data, documentation, paper! is organized in a comprehensible way (i.e., in a way that humans and computers understand and \emph{expect})
\item If you conform to this structure you get a lot of additional benefits/tools for free (e.g., nicely formatted doc/man pages, easily generate a project/package/date webpage, etc.)
\end{itemize}

\leftmarginpar{What will I learn?}
\begin{itemize}
\item How to scaffold (generate) the package structure
\item Where and how to put your analysis scripts
\item How to write useful helper functions in separate source files (which can easily be used in other scripts -- in and outside your \proglang{R}-package)
\item How to attach data to the package
\item How to document objects (package, data, functions)
\item How to write your paper in \proglang{Sweave}, using the vignette -- allowing you to intermingle \R~code and \LaTeX
\item How to share the code with your colleagues
\item Where to learn more
\end{itemize}

\section{Let's get started}

\leftmarginpar{\fct{usethis::create\_package}}
This will scaffold the \R-package. Let's run
<<scaffold, eval=FALSE>>=
usethis::create_package("Rpackage", rstudio = TRUE)
@
and navigate into the \code{Rpackage} folder.
\marginpar{If you know \proglang{git}, run \fct{usethis::use\_git}}
What did we get?
%
\begin{Verbatim}
.
├── DESCRIPTION
├── NAMESPACE
├── R
└── Rpackage.Rproj
\end{Verbatim}
%
\marginpar{The \code{.Rproj} file is just RStudio's ``project file'', storing some settings regarding your project organization. In particular it opens a new RStudio session in that current folder...}
We get the minimal file and folder structure of an \proglang{R}-package (\code{Rpackage.Rproj} is optional if you are using RStudio). Congratulations -- you just wrote your first package!

\leftmarginpar{\fct{usethis::use\_data\_raw}}
The \code{data-raw} folder is where the untouched raw data goes. But also all the scripts that manipulate this raw data and generate some other output (e.g., data for the analysis). I usually put all my scripts there since it allows me to easily store intermediate objects (e.g., a model fit as returned by \fct{fit}, see below), attach them to the package and use them at a later stage. Let's get concrete
\marginpar{You can also put raw data, i.e., a \code{.csv} or some other file in this folder (again, it's just a folder). It is convention to name the raw data the same as the script which manipulates it, i.e., \code{useful\_data.csv} in this case...}
<<data-raw, eval=FALSE>>=
usethis::use_data_raw("useful_data")
@
This will create the \code{data-raw} folder and initialize the \code{useful\_data.R} script. An example what to put there
%
<<script, eval=FALSE>>=
#= data-raw/useful_data.R
## code to prepare `useful_data` dataset goes here
## e.g., fetch data from the qualtrics server
library(dplyr)
useful_data <- iris

## clean it
useful_data <- useful_data %>%
  rename(species = Species, sepal_length = Sepal.Length,
         sepal_width = Sepal.Width, petal_length = Petal.Width,
         petal_width = Petal.Length)  # classic mistake ;)

## this is the magic line!
usethis::use_data(useful_data, overwrite = TRUE)
@
%
\marginpar{See why this convention is helpful? Any person familiar with the \R-package workflow expects that an object part of a package was generated in the \code{data-raw} folder, in a script with the same name.}
\leftmarginpar{Run the script! What happened?}
Running the script (see also \code{?usethis::use\_data}) will generate the \code{data} folder and the \R-data \code{useful\_data.rda}.

\leftmarginpar{\fct{devtools::load\_all}}
You will run \fct{devtools::load\_all} a lot! It essentially simulates a \code{library(Rpackage)} call (i.e., loads the package as is it was installed).
<<load-all>>=
devtools::load_all()
head(Rpackage::useful_data)
@
%
\leftmarginpar{The \code{R} directory}
Everything in the \code{R} folder gets sourced! Maybe we have a function that we use in multiple scripts (during data preparation or analysis in \code{data-raw}) or want other users to benefit from (when we share the package)...
\marginpar{It is convention to name the source file the same as the function name. I.e., a function \fct{foo} lives in \code{foo.R}! It's just a convention, you can put multiple functions into the same source file if you like...}
<<foo, eval=FALSE>>=
#= R/foo.R
foo <- function(msg = "Are you sleeping?") {
  cat(msg, "\n")
}
@
%
\marginpar{By the way, you can put other objects (other than functions) in a script in the \code{R} folder... Remember, the scripts get just sourced during package loading (try it out and put \code{print("I'm getting sourced")} in a separate file and simulate loading via \fct{devtools::load\_all}).}
Again, ``test it''
<<eval=FALSE>>=
devtools::load_all()
foo()
@
%
<<hidden, echo=FALSE>>=
Rpackage:::foo()
@
%
\leftmarginpar{What did we learn so far?}
\marginpar{Sometimes it is also reasonable to write a function only for organizational sake and not clutter the source file. Usually if you write a function such as \fct{make\_tea} you can forget about the implementation details...}
\begin{itemize}
\item What an (\R) package is and (hopefully) we are all convinced that it is pretty easy and useful!
\item How to organize raw data and generate analysis-ready data.
\item How to ``outsource'' functions that we frequently use or want other users to be able to consume
\end{itemize}

\section{The analysis script}

As already mentioned, we are mostly writing analysis scripts that only get run ``once'' and produce some intermediate or final results (either used in another script or in the final paper). Again, there are many ways to do this, but my way is to use the exact same workflow as for raw data. Let's be concrete
<<analysis-script, eval=FALSE>>=
usethis::use_data_raw("analysis_script")
@
Then put the following code in there, i.e., the file \code{./data-raw/analysis\_script.R} (make sure you understand it!)
<<script, eval=FALSE>>=
#= data-raw/analysis_script.R
## code to prepare `analysis_script` dataset goes here
## load the package (as we use the useful_data)
devtools::load_all()

## very short analysis (your analysis is probably more insightful...)
fit <- lm(sepal_length ~ species, data = useful_data)

## and save some useful intermediate results
analysis_script <- list()
analysis_script$fit <- fit

## this is the magic line!
usethis::use_data(analysis_script, overwrite = TRUE)
@
and execute!

Exactly as before, this will generate \code{analysis\_script.rda} in the \code{data} folder. The \code{analysis\_script} is just a \class{list} object containing the \code{lm} fit, which is now readily available!
<<summary-fit>>=
devtools::load_all()
summary(Rpackage::analysis_script$fit)
@

\section{The documentation game}

The above gets you already quite far. Did you ever wonder, how these fancy \R-helppages are generated?
\leftmarginpar{Documentation as ``code''}
Documentation and code should live together (if possible). We can use the \pkg{roxygen2} package to easily document code using a special comment syntax (starting with \code{\#'}).
\marginpar{Anything you can achieve in RStudio is available through this command palette (as in most IDEs)...}
Move back to the \code{R/foo.R} file, place the cursor inside the function body and press \code{Shift+Ctrl/Cmd+P}. Type ``Insert a rox'' and hit enter. This scaffolds the \emph{roxygen skeleton}.

Let's explain what this function does
<<roxygen, eval=FALSE>>=
#= R/foo.R
#' For Orientation Only
#'
#' This function does nothing useful, but it could!
#'
#' @param msg a message to `cat` to the console.
#'
#' @returns NULL
#' @export
#'
#' @examples
#' foo("No, I am not!")
foo <- function(msg = "Are you sleeping?") {
  cat(msg, "\n")
}

@
%
\leftmarginpar{\fct{devtools::document}}
\marginpar{A \code{NAMESPACE} defines, what objects are visible when loading the package...}
This \emph{parses} the roxygen skeleton and generates the \code{man} folder (manpages are the helppages) as well as the \code{.Rd} documentation (which is \R's markup, similar to \LaTeX, for documentation). Further, it automatically manages the \code{NAMESPACE} for us. But we don't have to know about this -- all we need to do, is, write the magic comments and run \fct{devtools::document} to update it. Check this out
<<check-documentation, eval=FALSE>>=
?foo
@
%
Wicked!

While you are at it, take a look at the \code{DESCRIPTION} file -- it just contains some metadata, minimally documenting the package. Just fill in the fields.

\leftmarginpar{How to document data?}
\pkg{roxygen2} only generates documentation from the source in the \code{R} directory (at least per default). I usually create a file \code{R/roxygen.R} where I put all the documentation stuff, with no corresponding source file in the \code{R} directory, such as our \code{useful\_data} data (remember, its source lives in \code{data-raw}). So, let's document it
<<roxygen-raw-data, eval=FALSE>>=
#= R/roxygen.R
#' Edgar Anderson's Iris Data
#'
#' With cleaner names...
#'
#' @format Data frame
#' \describe{
#' \item{sepal_width}{Width of the sepal (numeric)}
#' \item{sepal_length}{Length of the sepal (numeric)}
#' \item{petal_width}{Width of the petal (numeric)}
#' \item{petal_length}{Length of the petal (numeric)}
#' \item{species}{Species (factor with levels setosa, versicolor, virginica)}
#' }
"useful_data"
@
Again, run
<<document-raw-data, eval=FALSE>>=
devtools::document()
?useful_data
@
%
to generate the actual man pages in the \code{man} directory, and load them.
\marginpar{\fct{devtools::build\_manual} generates a \code{.pdf} manual for free -- try it out!}

\section{Paper vignette}

What is reproducible research? Anyone should be able to generate your results on the fly! Now imagine that you want to present the results of your regression analysis which was conducted in \code{data-raw/analysis\_script.R} and is available via \code{Rpackage::analysis\_script\$fit}. You maybe copy paste the parameter estimates to an excel file or use some tool to build a \LaTeX~table. In my view, this introduces three problems
%
\begin{enumerate}
\item The link between the final output (the table) and the analysis breaks (if you share the \LaTeX~source, it is not evident, where the results were generated).
\item If you update the analysis (e.g., add a variable in the regression) a whole chain of manual updates is required (which is tidious and error prone)!
\item Building tables manually is not fun... ;)
\end{enumerate}
%
\marginpar{But how do I collaborate on a paper? You might wonder... I would recommend that you only collaborate with people familiar to this workflow (and \proglang{git})! ;)}

%% Sometimes it is fun...
\begin{tabular}{lll}
Enters: & The package vignette \\
Leaving: & Overleaf \\
\end{tabular}

\leftmarginpar{\fct{paperPackage::scaffold} \url{https://github.com/dheimgartner/paperPackage/}}
\R~has built-in support to compile \code{.Rnw} documents -- nothing else than plain \LaTeX~intermingled with \R~code chunks. Code chunks start with \code{<<>>=} and end with \code{@}. Everything in between is evaluated as \R-code and its output can be embedded in the text. As a starting point, run
<<scaffold-vignette, eval=FALSE>>=
paperPackage::scaffold("RJournal")
@
which scaffolds (I like that word!) the \code{vignettes} folder and generates a minimal article using the \emph{R Journal} style...

\leftmarginpar{\fct{devtools::build\_vignettes}}
Compile the vignette using
<<compile, eval=FALSE>>=
devtools::build_vignettes()
@
which builds the vignette (our paper) in the \code{doc} repository and will be shipped together with our package (run \code{vignette("article", package = "Rpackage")}).

\marginpar{You can also use \pkg{knitr} and \code{.Rmd} files to generate vignettes or papers, but I am quite old-fashioned and prefer \code{Sweave} (i.e., \code{.Rnw}) \url{https://stat.ethz.ch/R-manual/R-devel/library/utils/doc/Sweave.pdf}.}

\section{Sharing is caring}

\leftmarginpar{\fct{devtools::build}}
This builds the source package (\code{.tar.gz} -- a compression file format similar to \code{.zip}) which can be installed by
\marginpar{You can also upload the code to GitHub and then people can install it via \fct{devtools::github\_install}. See \url{https://github.com/dheimgartner/Rpackage}}...
<<install, eval=FALSE>>=
install.packages("../Rpackage.tar.gz", repos = NULL)
@
\marginpar{By default, the built package is located in the parent. That's why we need to navigate one folder level up when installing (i.e., \code{../}).}

\section{Take away}

\leftmarginpar{Let's recap the whole game by recalling what these functions do (do you remember?}
\marginpar{\pkg{usethis} and \pkg{devtools} provide many more helpful functions for package development!}
\begin{itemize}
\item \fct{usethis::create\_package}
\item \fct{usethis::use\_data\_raw}
\item \fct{devtools::document}
\item \fct{paperPackage::scaffold}
\item \fct{devtools::build\_vignettes}
\item \fct{devtools::load\_all}
\item \fct{devtools::build}
\end{itemize}

\section{Next steps}

\begin{itemize}
\item Install this package and explore its ``functionality'': Inspect the data, call the function, browse the documentation and vignette -- make sure you understand, which source files generate the functionality!
\item Learning by doing -- try it for your next project/paper!
\item This gets you going but it only scratches the surface (e.g., how to properly manage external dependencies)
\item Tip: Run \fct{devtools::check} and learn from the errors, warnings and notes...
\item Please, please, please learn some \proglang{git} for versioning and your own sake (and necessarily some \proglang{bash})
\end{itemize}

\leftmarginpar{Resources}
\marginpar{GitHub is ``just'' a host for repositories -- a website/app, but with some very nice features for project management, e.g., the issue tracker). However, the main versioning tool (and magic) is \proglang{git} -- don't mistake the two...}

\begin{itemize}
\item Package development: \url{https://r-pkgs.org/} \citep{Wickham+Bryan:2023}
\item \proglang{bash}: \url{https://linuxcommand.org/lc3_learning_the_shell.php} \citep{Bash:2019}
\item \proglang{Git BASH} for windows users: \url{https://gitforwindows.org/}
\item \proglang{git}: \url{https://git-scm.com/book/en/v2} -- first three chapters \citep{Git:2014}
\end{itemize}

\bibliography{refs}

% \newpage

% \begin{appendix}
%
% \section{To cite or not to cite} \label{sec:cite}
%
% A nice book: \citet{Cameron+Trivedi:2013}
%
% \section{\R~code} \label{sec:code}
% \leftmarginpar{Wow this is some real code!}
% <<>>=
% f <- function() {
%   cat("Hello, world!\n")
% }
% f()
% @
%
% \leftmarginpar{Here is a plot}
% \setkeys{Gin}{width=.8\textwidth}
% \begin{figure}[H]
% \centering
% <<plot, echo=FALSE, fig=TRUE, height=5, width=6>>=
% plot(sepal_length ~ sepal_width, data = useful_data, col = useful_data$species,
%      pch = 19, xlab = "Sepal width (cm)", ylab = "Sepal Length (cm)")
% legend("topleft", legend = c("Setosa", "Versicolor", "Virginica"), pch = 19,
%        col = 1:3, bty = "n")
% @
% \caption{\label{fig:plot} I am just a plot.}
% \end{figure}
%
% \section{Mathematik, Mathematik --- immer diese Mathematik} \label{sec:maths}
%
% \begin{equation}
% a^2 + b^2 = c^2
% \end{equation}
%
% \end{appendix}

\end{document}
